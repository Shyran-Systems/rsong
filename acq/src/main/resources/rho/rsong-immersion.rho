new metaDataMapStore, songMapStore, stdout(`rho:io:stdout`) in {
  metaDataMapStore!({}) |
  songMapStore!({}) |
  contract @["Immersion", "store"](@songDataIn, @songMetadataIn, songIdOut) = {
    new songId, songDataId in {
      stdout!("In immersion store") |
      for (@metaDataMap <- metaDataMapStore) {
         stdout!("metaDataMap") |
         metaDataMapStore!(metaDataMap)
      } |
      for (@songMap <- songMapStore) {
         stdout!("songMap") |
         songMapStore!(songMap)
      } |
      for (@metaDataMap <- metaDataMapStore; @songMap <- songMapStore) {
        stdout!("In immersion store: after metaDataMap, songMap") |
        metaDataMapStore!(metaDataMap.set(*songId.toByteArray(), [songMetadataIn, *songDataId.toByteArray()])) |
        songMapStore!(songMap.set(*songDataId.toByteArray(), songDataIn)) |
        songIdOut!(*songId.toByteArray())
      }
    }
  } |
  contract @["Immersion", "retrieveSong"](@songIdIn, songDataOut) = {
    for (@metaDataMap <- metaDataMapStore; @songMap <- songMapStore) {
      metaDataMapStore!(metaDataMap) |
      songMapStore!(songMap) |
      songDataOut!(songMap.get(metaDataMap.get(songIdIn).nth(1)))
    }
  }
}
